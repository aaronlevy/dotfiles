#!/bin/bash

if [[ $(uname -s) == 'Darwin' ]]; then
  # OSX does not support '--X' options
  alias ll='ls -ahlF'
else
  alias ll='ls -ahlF --group-directories-first'
fi

alias vi='vim'

# Tell tmux to use 256 colors
alias tmux='tmux -2'

# Reset ssh-agent env vars in tmux sessions
alias fixssh='eval $(tmux showenv | awk '\''/SSH_AUTH_SOCK|SSH_CONNECTION/ {split($0,v,"="); sshenv = sshenv v[1] "=\"" v[2] "\" "} END {print "export " sshenv}'\'') && ssh-add -l'

GOHOME=$HOME/dev/go/projects

# Setup a new go project
function gproj {
    typeset project="$1"
    if [ -z $project ]; then
        exit 1
    fi
    mkdir -p $GOHOME/$project/{src,pkg,bin}
    touch $GOHOME/$project/.init
}

# Git clone using GOPATH
function gclone {
    typeset repo="$1"
    if [ -z $repo ]; then
        exit 1
    fi
    git clone $repo $GOPATH/src/$repo
    return $?
}

# golang virtualenv-ish helper
function gworkon {
    typeset project="$1"
    if [ -z $project ]; then
        exit 1
    fi

    ppath=$GOHOME/$project
    if [ ! -d "$ppath" ]; then
        exit 1
    fi

    gdeactivate
    GOPATH=$ppath
    PS1="$PS1($project): "

    alias cdw="cd $ppath"
    alias deactivate=gdeactivate
    gcd $project
}
complete -F _gcd gworkon

# deactivate virtualenv-ish helper
function gdeactivate {
    unalias deactivate 2> /dev/null
    unalias cdw 2> /dev/null
    source ~/.bashrc
}

# cd into go project, and source init file
function gcd {
    cd $GOHOME/$1 && source $GOHOME/$1/.init
}

# Bash complete GO projects
function _gcd {
    local cur opts
    cur=${COMP_WORDS[COMP_CWORD]}
    opts=$(cd $GOHOME ; ls -d */ | sed 's|/$||')
    COMPREPLY=( $(compgen -W "${opts}" -- $cur) )
}
complete -F _gcd gcd

# Python virtualenv helper
PYHOME=$HOME/dev/python/projects
function pworkon {
    typeset project="$1"
    if [ -z $project ]; then
        exit 1
    fi

    activate="$PYHOME/$project/bin/activate"
    if [ ! -f "$activate" ]; then
        echo "ERROR: Environment '$PYHOME/$project' does not contain an activate script." >&2
        exit 1
    fi

    # Deactivate existing
    deactivate >/dev/null 2>&1

    source "$activate"
    exit $?
}

